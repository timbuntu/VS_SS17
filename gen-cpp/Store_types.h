/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Store_TYPES_H
#define Store_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _Order__isset {
  _Order__isset() : item(false), amount(false), price(false), total(false) {}
  bool item;
  bool amount;
  bool price;
  bool total;
} _Order__isset;

class Order {
 public:

  static const char* ascii_fingerprint; // = "77EFE1931A84C0FC894CDF68321F1A49";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0xEF,0xE1,0x93,0x1A,0x84,0xC0,0xFC,0x89,0x4C,0xDF,0x68,0x32,0x1F,0x1A,0x49};

  Order() : item(), amount(0), price(0), total(0) {
  }

  virtual ~Order() throw() {}

  std::string item;
  int16_t amount;
  int32_t price;
  int64_t total;

  _Order__isset __isset;

  void __set_item(const std::string& val) {
    item = val;
  }

  void __set_amount(const int16_t val) {
    amount = val;
  }

  void __set_price(const int32_t val) {
    price = val;
  }

  void __set_total(const int64_t val) {
    total = val;
  }

  bool operator == (const Order & rhs) const
  {
    if (!(item == rhs.item))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(total == rhs.total))
      return false;
    return true;
  }
  bool operator != (const Order &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Order & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Order &a, Order &b);



#endif
